{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["defaultConfig","rows","cols","style","elements","key","row","col","colSpan","rowSpan","component","id","type","render","console","log","Boolean","window","location","hostname","match","ReactDOM","cell","find","m","push","padding","onChange","v","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2wBAOA,IAAMA,EAAgB,CACpBC,KAAM,GACNC,KAAM,GACNC,MAAO,GAEPC,SAAU,CACR,CAAEC,IAAK,MAAOC,IAAK,EAAGC,IAAK,EAAGC,QAAS,EAAGC,QAAS,GACnD,CAAEJ,IAAK,MAAOC,IAAK,EAAGC,IAAK,EAAGE,QAAS,GACvC,CAAEJ,IAAK,MAAOC,IAAK,EAAGC,IAAK,GAC3B,CAAEF,IAAK,MAAOC,IAAK,EAAGC,IAAK,GAC3B,CACEF,IAAK,MACLC,IAAK,EACLC,IAAK,EACLG,UAAW,CAAEC,GAAI,UAAWC,KAAM,SAClCC,OAAQ,YAAmB,IAAhBP,EAAe,EAAfA,IAAKC,EAAU,EAAVA,IAEd,OADAO,QAAQC,IAAI,QAAST,EAAKC,GAExB,6BACGD,EADH,IACSC,OCdCS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OAAO,mBF4BD,WAIb,IAJ6B,IACrBZ,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KACRE,EAAW,GAFW,WAInBE,GACP,IAL0B,eAKjBC,GACP,IAAMe,EAAOlB,EAASmB,MAAK,SAAAC,GAAC,OAAIA,EAAElB,MAAQA,GAAOkB,EAAEjB,MAAQA,MAAQ,CACjED,MACAC,OAEFH,EAASqB,KAAT,KAAmBH,EAAnB,CAAyBT,OAAQ,2BAASP,EAAT,YAAgBC,QAL1CA,EAAM,EAAGA,EAAML,EAAMK,IAAQ,EAA7BA,IADFD,EAAM,EAAGA,EAAML,EAAMK,IAAQ,EAA7BA,GAYT,OACE,yBAAKH,MAAO,CAAEuB,QAAS,KACrB,kBAAC,IAAD,CACE1B,cAAa,KAAOA,EAAP,CAAsBI,aACnCuB,SAAU,SAAAC,GACRd,QAAQC,IAAI,WAAYa,SEjDlB,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a5531c24.chunk.js","sourcesContent":["import React from \"react\";\nimport MergeableTable from \"mergeable-table\";\nimport \"antd/lib/dropdown/style/index.css\";\nimport \"mergeable-table/lib/style/index.css\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst defaultConfig = {\n  rows: 10,\n  cols: 20,\n  style: {},\n\n  elements: [\n    { key: \"2_1\", row: 2, col: 1, colSpan: 2, rowSpan: 3 },\n    { key: \"2_4\", row: 2, col: 4, rowSpan: 3 },\n    { key: \"0_1\", row: 0, col: 1 },\n    { key: \"1_3\", row: 1, col: 3 },\n    {\n      key: \"5_2\",\n      row: 5,\n      col: 2,\n      component: { id: \"ddssdsd\", type: \"input\" },\n      render: ({ row, col }) => {\n        console.log(\"props\", row, col);\n        return (\n          <div>\n            {row}-{col}\n          </div>\n        );\n      }\n    }\n  ]\n};\n\nexport default function App() {\n  const { rows, cols } = defaultConfig;\n  const elements = [];\n\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      const cell = elements.find(m => m.row === row && m.col === col) || {\n        row,\n        col\n      };\n      elements.push({ ...cell, render: () => `${row}-${col}` });\n    }\n  }\n\n  // const [state, setState] = useState({ ...defaultConfig, elements });\n\n  return (\n    <div style={{ padding: 24 }}>\n      <MergeableTable\n        defaultConfig={{ ...defaultConfig, elements }}\n        onChange={v => {\n          console.log(\"onChange\", v);\n        }}\n      />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}